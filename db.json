{
  "products": [
    {
      "id": "1",
      "name": "Gasolina"
    },
    {
      "id": "2",
      "name": "Etanol"
    },
    {
      "id": "3",
      "name": "Diesel"
    },
    {
      "id": "4",
      "name": "Lubrificante"
    }
  ],
  "code": {
    "content": "<div>\n  <form class= searchForm>\n    <mat-form-field class= searchField appearance= outline>\n      <div class= example-form>\n        <input matInput [formControl]= searchControl/>\n        <a class=searchIcon (click)=openSearch()>\n          <mat-icon>search</mat-icon>\n        </a>\n      </div>\n    </mat-form-field>\n  </form>\n</div>\n<div>"
  },
  "codeTs": {
    "contentCodeTs": "ngOnInit() {\n  this.loadProducts();\n  this.filteredProducts$ = this.searchControl.valueChanges.pipe(\n    startWith(''),\n    debounceTime(300),\n    map((searchTerm) => this.filterProducts(searchTerm || ''))\n  );\n}\n\nloadProducts() {\n  this.productService.getProducts().subscribe((data) => {\n    this.products = data;\n  });\n}\n\nfilterProducts(searchTerm: string): Product[] {\n  const lowerCaseTerm = searchTerm.toLowerCase();\n  return this.products.filter((product) => \n    product.name.toLowerCase().includes(lowerCaseTerm)\n  );\n}\n\nopenSearch() {\n  const searchRef = this.search.open(OpenSearchComponent);\n  searchRef.afterClosed().subscribe((result: Product[]) => {\n    if (result) {\n      this.searchControl.setValue(result[0].name);\n      console.log('Dialog result:', result);\n    }\n  });\n}"
  },
  "CodeSearch": {
    "contentCodeSearch": "<div class=\"table-contrainer\">\n  <div class=\"table-header\">\n    <h3>Produtos Cadastrados</h3>\n    <div class=\"buttons\">\n      <button (click)=\"closeSearch()\" class=\"close\">\n        <mat-icon>close</mat-icon>\n      </button>\n      <button class=\"check\" [disabled]=\"!selectionControl.value\" (click)=\"checkSelection()\">\n        <mat-icon>check</mat-icon>\n      </button>\n    </div>\n  </div>\n  <input class=\"search\" matInput placeholder=\"Digite o nome do produto\" [formControl]=\"searchControl\" />\n  <mat-selection-list [multiple]=\"false\" hideSingleSelectionIndicator [formControl]=\"selectionControl\">\n    <mat-list-option class=\"product-list\" *ngFor=\"let product of filteredProducts$ | async\" [value]=\"product\">\n      {{ product.id }} - {{ product.name }}\n    </mat-list-option>\n  </mat-selection-list>\n</div>"
  },
  "dropdownCodeHtml": {
    "dropdownContentHtml": "<mat-form-field class=\"custom-field\" hideRequiredMarker=\"true\" appearance=\"outline\">\n  <mat-label></mat-label>\n  <mat-select [formControl]=\"prodControl\" required>\n    <mat-option *ngFor=\"let prod of products; trackBy: prod.id\" [value]=\"prod.id\">\n      {{ prod.name }}\n    </mat-option>\n  </mat-select>\n\n  <button *ngIf=\"prodControl.value\" mat-icon-button matSuffix class=\"clear-button\" (click)=\"clearSelection($event)\" aria-label=\"Clear selection\">\n    <mat-icon>clear</mat-icon>\n  </button>\n\n  <mat-error *ngIf=\"prodControl.hasError('required')\">Selecione um produto</mat-error>\n</mat-form-field>"
  },
  "buttonCodeHtml": {
    "buttonContentHtml": "<div class=\"button-container\">\n  <button *ngIf=\"!prodControl.value\" mat-raised-button (click)=\"addOrUpdate()\">\n    <mat-icon>add</mat-icon>\n  </button>\n\n  <button *ngIf=\"prodControl.value\" mat-raised-button (click)=\"addOrUpdate()\">\n    <mat-icon>edit</mat-icon>\n  </button>\n</div>"
  },
  "buttonCodeTs": {
    "buttonContentTs": "addOrUpdate(): void {\n  const selectedId = this.prodControl?.value ?? 0;\n  const selectedProduct = this.products.find(\n    (product) => product.id === selectedId\n  );\n\n  const dialogRef = this.dialog.open(DropdownDialogComponent, {\n    data: {\n      id: selectedId,\n      name: selectedProduct?.name ?? '',\n    },\n    width: '700px',\n  });\n\n  dialogRef.afterClosed().subscribe((result) => {\n    if (result) {\n      if (result.id > 0) {\n        this.productService.updateProduct(result).subscribe(() => {\n          const index = this.products.findIndex((p) => p.id === result.id);\n          if (index !== -1) {\n            this.products[index] = result;\n          }\n        });\n      } else {\n        this.productService.addProduct(result).subscribe((newProduct) => {\n          this.products.push(newProduct);\n        });\n      }\n    }\n  });\n}\n\nclearSelection(event: MouseEvent) {\n  event.stopPropagation();\n  this.prodControl.setValue(null);\n}"
  },
  "buttonCodeService": {
    "buttonContentService": "export class ProductService {\n  private apiUrl = 'http://localhost:3000/products';\n\n  constructor(private http: HttpClient) { }\n\n  getProducts(): Observable<Product[]> {\n    return this.http.get<Product[]>(this.apiUrl);\n  }\n\n  addProduct(product: Product): Observable<Product> {\n    return this.http.post<Product>(this.apiUrl, product);\n  }\n\n  updateProduct(product: Product): Observable<Product> {\n    return this.http.put<Product>(`${this.apiUrl}/${product.id}`, product);\n  }\n}"
  }
}
